{
	"info": {
		"_postman_id": "servicekit-core-api",
		"name": "Servicekit - Core API (User CRUD)",
		"description": "Complete user CRUD operations using Servicekit's core infrastructure.\n\n## Features\n- User management (Create, Read, Update, Delete)\n- Pagination support\n- Schema introspection\n- Auto-seeded data with stable ULIDs\n- RFC 9457 error responses\n\n## Quick Start\n1. Start service: `cd examples/core_api && uv run python main.py`\n2. Run `Check Service Health` to verify\n3. Service auto-seeds two users (Alice and Bob) with stable IDs\n4. Run requests directly - no need to capture IDs!\n\n## Seeded Users (Stable ILIDs)\n- Alice: `01JARKBV9QFY8P7X3Z2E4M6N5Q`\n- Bob: `01JARKBV9R8Y7W6V5U4T3S2R1P`\n\n## Collection Variables\n- `alice_id`: Pre-configured with Alice's stable ULID\n- `user_id`: Can be set to any user ID for testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health & System Info",
			"item": [
				{
					"name": "Check Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"healthy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						},
						"description": "Check if the service is running and healthy. This endpoint does not require authentication."
					},
					"response": []
				}
			],
			"description": "Health checks and service information endpoints."
		},
		{
			"name": "2. User Management (CRUD)",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User created with ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.collectionVariables.set('user_id', jsonData.id);",
									"});",
									"",
									"pm.test(\"User has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('full_name');",
									"    pm.expect(jsonData).to.have.property('is_active');",
									"    pm.expect(jsonData).to.have.property('created_at');",
									"    pm.expect(jsonData).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"alice\",\n  \"email\": \"alice@example.com\",\n  \"full_name\": \"Alice Smith\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Create a new user. The user ID will be automatically captured in the `user_id` variable for use in subsequent requests."
					},
					"response": []
				},
				{
					"name": "List All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Users include seeded data (Alice and Bob)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(2);",
									"    const usernames = jsonData.map(u => u.username);",
									"    pm.expect(usernames).to.include('alice');",
									"    pm.expect(usernames).to.include('bob');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "List all users without pagination. Returns an array of user objects."
					},
					"response": []
				},
				{
					"name": "List Users (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData).to.have.property('pages');",
									"});",
									"",
									"pm.test(\"Items is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users?page=1&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "List users with pagination. Returns a PaginatedResponse with items, total, page, size, and pages."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User has expected fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "{{user_id}}"]
						},
						"description": "Get a specific user by ID. Uses the auto-captured `{{user_id}}` variable."
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(\"alice.smith@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"alice\",\n  \"email\": \"alice.smith@example.com\",\n  \"full_name\": \"Alice J. Smith\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "{{user_id}}"]
						},
						"description": "Update an existing user. All fields must be provided (PUT request)."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "{{user_id}}"]
						},
						"description": "Delete a user by ID. Returns 204 No Content on success."
					},
					"response": []
				},
				{
					"name": "Get User Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is JSON Schema format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('$defs');",
									"    pm.expect(jsonData).to.have.property('properties');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/$schema",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "$schema"]
						},
						"description": "Get the Pydantic JSON schema for the User model. Useful for understanding the data structure and validation rules."
					},
					"response": []
				}
			],
			"description": "Complete CRUD operations for user management."
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "alice_id",
			"value": "01JARKBV9QFY8P7X3Z2E4M6N5Q",
			"type": "string"
		},
		{
			"key": "bob_id",
			"value": "01JARKBV9R8Y7W6V5U4T3S2R1P",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "01JARKBV9QFY8P7X3Z2E4M6N5Q",
			"type": "string"
		}
	]
}
