{
	"info": {
		"_postman_id": "servicekit-auth-basic",
		"name": "Servicekit - Authentication (Basic)",
		"description": "API key authentication workflow with file-based key storage.\n\n## Features\n- API key authentication (X-API-Key header)\n- Multiple key support for rotation\n- Authentication failure scenarios\n- Complete CRUD with authentication\n- RFC 9457 error responses\n\n## Quick Start\n1. Create API keys file:\n   ```bash\n   echo \"sk_dev_abc123\" > api_keys.txt\n   echo \"sk_dev_xyz789\" >> api_keys.txt\n   ```\n2. Start service: `fastapi dev examples/auth_basic.py`\n3. Run `Check Service Health` (no auth required)\n4. Test authentication failures\n5. Run `Create User` with valid API key (auto-captured ID)\n\n## Auto-Captured Variables\n- `user_id`: Automatically set from create operations\n- `api_key`: Default key for authenticated requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health & System Info",
			"item": [
				{
					"name": "Check Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"healthy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						},
						"description": "Health check endpoint (public, no authentication required)."
					},
					"response": []
				}
			],
			"description": "Public endpoints that don't require authentication."
		},
		{
			"name": "2. Authentication Tests",
			"item": [
				{
					"name": "Access Without Auth (401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error follows RFC 9457 format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});",
									"",
									"pm.test(\"Error type is unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.include('unauthorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Test accessing protected endpoint without authentication. Should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Access With Invalid Key (401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error indicates invalid key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('Invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "invalid_key_12345"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Test accessing protected endpoint with invalid API key. Should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Access With Valid Key (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array of users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Test accessing protected endpoint with valid API key. Should return 200 OK."
					},
					"response": []
				}
			],
			"description": "Test authentication scenarios (success and failure cases)."
		},
		{
			"name": "3. User Management (Authenticated)",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User created with ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.collectionVariables.set('user_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"alice\",\n  \"email\": \"alice@example.com\",\n  \"full_name\": \"Alice Smith\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Create a new user with authentication. Requires valid X-API-Key header."
					},
					"response": []
				},
				{
					"name": "List All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "List all users. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User has expected fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "{{user_id}}"]
						},
						"description": "Get a specific user by ID. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"alice\",\n  \"email\": \"alice.smith@example.com\",\n  \"full_name\": \"Alice J. Smith\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "{{user_id}}"]
						},
						"description": "Update an existing user. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users", "{{user_id}}"]
						},
						"description": "Delete a user by ID. Requires authentication."
					},
					"response": []
				}
			],
			"description": "User CRUD operations requiring authentication."
		},
		{
			"name": "4. Key Rotation Test",
			"item": [
				{
					"name": "Access With First Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_abc123"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Test first API key from api_keys.txt file."
					},
					"response": []
				},
				{
					"name": "Access With Second Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_xyz789"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "users"]
						},
						"description": "Test second API key from api_keys.txt file. Both keys should work for zero-downtime rotation."
					},
					"response": []
				}
			],
			"description": "Test multiple API keys for rotation support."
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "sk_dev_abc123",
			"type": "string"
		}
	]
}
