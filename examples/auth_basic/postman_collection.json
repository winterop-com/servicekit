{
	"info": {
		"_postman_id": "servicekit-auth-basic",
		"name": "Servicekit - Authentication (Basic)",
		"description": "API key authentication workflow demonstration.\n\n## Features\n- API key authentication (X-API-Key header)\n- Multiple key support for rotation\n- Authentication failure scenarios\n- Health check (public endpoint)\n- System info (protected endpoint)\n- RFC 9457 error responses\n\n## Quick Start\n1. Start service: `cd examples/auth_basic && uv run python main.py`\n2. Run `Check Service Health` (no auth required)\n3. Test authentication failures on protected endpoint\n4. Test authentication success with valid API key\n5. Test key rotation with multiple keys\n\n## Available API Keys\n- `sk_dev_abc123` (first key)\n- `sk_dev_xyz789` (second key, for rotation demo)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Public Endpoints",
			"item": [
				{
					"name": "Check Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"healthy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						},
						"description": "Health check endpoint (public, no authentication required)."
					},
					"response": []
				}
			],
			"description": "Public endpoints that don't require authentication."
		},
		{
			"name": "2. Authentication Tests",
			"item": [
				{
					"name": "Access System Without Auth (401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error follows RFC 9457 format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});",
									"",
									"pm.test(\"Error type is unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.include('unauthorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/system",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "system"]
						},
						"description": "Test accessing protected system endpoint without authentication. Should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Access System With Invalid Key (401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error indicates invalid key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('Invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "invalid_key_12345"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/system",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "system"]
						},
						"description": "Test accessing protected endpoint with invalid API key. Should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Access System With Valid Key (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has service name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/system",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "system"]
						},
						"description": "Test accessing protected system endpoint with valid API key. Should return 200 OK with system information."
					},
					"response": []
				}
			],
			"description": "Test authentication scenarios (success and failure cases)."
		},
		{
			"name": "3. Key Rotation Test",
			"item": [
				{
					"name": "Access With First Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has service info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_abc123"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/system",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "system"]
						},
						"description": "Test first API key (sk_dev_abc123)."
					},
					"response": []
				},
				{
					"name": "Access With Second Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has service info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "sk_dev_xyz789"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/system",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "system"]
						},
						"description": "Test second API key (sk_dev_xyz789). Both keys should work for zero-downtime rotation."
					},
					"response": []
				}
			],
			"description": "Test multiple API keys for rotation support."
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "sk_dev_abc123",
			"type": "string"
		}
	]
}
